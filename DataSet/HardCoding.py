# -*- coding: utf-8 -*-
"""Security_Manual_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12TG9QwbauQOwQd1HQNs_cpEtLCRrb4Ee

# <실습 1>보안 매뉴얼을 데이터 셋으로 만들어 허깅페이스에 올리기

## 1단계. PDF 파일로 작성된 보안 매뉴얼을 input, output으로 나뉜 csv 파일로 변환하기
"""

!pip install PyPDF2

# Google Drive를 Google Colab에 마운트
from google.colab import drive
drive.mount('/content/drive')

import PyPDF2
import pandas as pd
import re

# PDF 파일에서 텍스트를 추출하는 함수
def extract_text_from_pdf(pdf_file):
    with open(pdf_file, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in range(len(reader.pages)):
            text += reader.pages[page].extract_text()
    return text

# 텍스트에서 불필요한 공백과 줄 바꿈을 제거하는 함수
def clean_text(text):
    text = re.sub(r'\n+', ' ', text)  # 여러 줄 바꿈을 하나로 치환
    text = re.sub(r'\s+', ' ', text).strip()  # 연속된 공백을 하나로 줄임
    return text

# 보안 매뉴얼의 각 섹션을 질문과 답변으로 변환하는 함수
def manual_to_detailed_qa():
    qa_pairs = [
        # 근무 수칙
        ["보안 요원이 출퇴근할 때 지켜야 할 규칙은 무엇인가요?",
         "정해진 근무 시간에 맞춰 교대하며, 늦거나 빠른 출퇴근을 방지해야 합니다."],
        ["보안 요원이 근무 중에 착용해야 할 장비는 무엇인가요?",
         "보안 요원은 정해진 제복을 착용하고, 무전기, ID카드, 손전등을 항상 소지해야 합니다."],
        ["보안 요원이 근무 중에 주의해야 할 태도는 무엇인가요?",
         "항상 경계 태세를 유지하고, 불필요한 잡담과 개인 스마트폰 사용을 금지해야 합니다."],

        # 출입 통제
        ["방문자의 출입 절차는 어떻게 진행되나요?",
         "모든 방문자는 출입 기록을 작성한 후 신분증을 확인해야 하며, 출입 카드를 소지한 주민은 자동으로 출입이 허용됩니다."],
        ["출입 기록은 어떻게 유지해야 하나요?",
         "모든 출입자와 차량은 출입 기록부에 기록하고, CCTV 모니터링을 병행하여 관리합니다."],

        # CCTV 모니터링
        ["CCTV 모니터링 시 보안 요원이 해야 할 일은 무엇인가요?",
         "CCTV 화면을 실시간으로 감시하며, 이상 상황이 발생하면 즉시 보고해야 합니다."],
        ["CCTV 녹화 데이터를 어떻게 관리해야 하나요?",
         "모든 CCTV 녹화 데이터는 규정에 따라 보관하며, 필요 시 상부에 제출해야 합니다."],

        # 비상 상황 대처
        ["화재가 발생하면 보안 요원이 어떻게 대처해야 하나요?",
         "즉시 소방서에 신고하고, 주민을 비상구로 유도하며, 소화기를 사용해 초기 진화를 시도해야 합니다."],
        ["침입자가 발생하면 보안 요원이 어떻게 대처해야 하나요?",
         "침입자를 자극하지 말고, 즉시 경찰에 신고한 후 주민을 보호해야 합니다."],

        # 기타 긴급 대처
        ["응급 환자가 발생하면 보안 요원이 어떻게 대처해야 하나요?",
         "즉시 119에 연락하고, 기본 응급 처치를 시행한 후 안내합니다."],
        ["정전이 발생하면 보안 요원이 어떻게 대처해야 하나요?",
         "비상 발전기 작동 상태를 확인하고, 관리사무소와 협력하여 필요한 조치를 취합니다."],

        # 보고 체계
        ["보안 요원이 보고해야 할 상황은 무엇인가요?",
         "긴급 상황이 발생하면 즉시 상부에 보고한 후 대응 절차를 진행해야 합니다."],
        ["일일 보고서를 작성할 때 포함해야 할 정보는 무엇인가요?",
         "당일 발생한 모든 사건과 특이 사항을 일지에 기록하여 제출해야 합니다."]
    ]
    return qa_pairs

# 추출된 질문과 답변을 CSV 파일로 저장하는 함수
def manual_to_csv(output_csv):
    qa_pairs = manual_to_detailed_qa()
    df = pd.DataFrame(qa_pairs, columns=['input', 'output'])

    # 출력 데이터 확인을 위해 먼저 화면에 출력
    print(df)

    # CSV로 저장
    df.to_csv(output_csv, index=False, encoding='utf-8')

# PDF 파일 경로 설정 (Google Drive에서 PDF 파일을 불러오는 경로)
pdf_file_path = '/content/drive/My Drive/보안 매뉴얼.pdf'

# CSV 파일 경로 설정 (Google Drive에 저장할 경로)
csv_output_path = '/content/drive/MyDrive/Colab Notebooks/finetune_securityManual_model/dataset/security_manual_detailed_qa.csv'

# CSV로 저장
manual_to_csv(csv_output_path)

dataPath = "/content/drive/MyDrive/Colab Notebooks/finetune_securityManual_model/dataset/"

"""## 2단계. 라이브러리 설치 및 선언"""

!pip install jsonlines

import huggingface_hub
huggingface_hub.login()

import pandas as pd
import json

import jsonlines

from datasets import Dataset

"""## 3단계. 학습 데이터 불러오기 및 변환

### 3.1) 변경 포인트 (csv -> json)
"""

# 데이터 경로 설정 및 불러오기
datasetName = "security_manual_detailed_qa.csv"
jsonFileName = "security_manual_detailed_qa.json"

import pandas as pd
import json

# CSV 파일을 JSON으로 변환하는 함수
def csv_to_json(csv_file_path, json_file_path):
    # CSV 파일을 DataFrame으로 읽기
    df = pd.read_csv(csv_file_path)

    # JSON 파일로 저장
    with open(json_file_path, 'w', encoding='utf-8') as json_file:
        # 각 행을 JSON으로 변환하여 파일에 쓰기
        for index, row in df.iterrows():
            # 'input'과 'output'을 JSON으로 변환
            data = {'input': row['input'], 'output': row['output']}
            json.dump(data, json_file, ensure_ascii=False)
            json_file.write('\n')  # 각 행마다 줄바꿈 추가

# CSV 파일 경로와 JSON 파일 경로 설정
csv_file_path = dataPath + datasetName
json_file_path = dataPath + jsonFileName

# 함수 호출
csv_to_json(csv_file_path, json_file_path)

"""### 3.2) 기존 데이터 형식을 허깅페이스 데이터 셋에 업로드 용(파인튜닝 용)으로 변환"""

# 데이터셋 리스트 생성
indataset = []

# JSON 파일을 열고 각 줄을 파싱하여 'input'과 'response'를 기반으로 데이터셋 구성
with open(json_file_path, 'r', encoding='utf-8') as f:
    for line in f:
        data = json.loads(line)
        # Instruction 형식에 맞춰 입력 및 출력 설정
        indataset.append(f"<s>[INST] {data['input']} [/INST] {data['output']}</s>")

# 데이터셋 확인
print("데이터셋 확인:")
print(indataset[:5])  # 처음 5개 데이터 확인

# Hugging Face Dataset 형식으로 변환
dataset = Dataset.from_dict({'text': indataset})

# 데이터셋을 Google Drive 경로에 저장
dataPath = '/content/drive/My Drive/Colab Notebooks/finetune_securityManual_model/dataset/'
dataset.save_to_disk(dataPath)

# 데이터셋 정보 확인
print("데이터셋 정보 확인:")
print(dataset)

"""## 4단계. 허깅페이스에 Dataset 업로드"""

dataset.push_to_hub("kingkim/Security_Manual")