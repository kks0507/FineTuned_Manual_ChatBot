# -*- coding: utf-8 -*-
"""New_FineTuning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LtNLUzkb42lijT4dhRpWVqcVrRDdPok1
"""

!pip install -q transformers datasets accelerate

import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from datasets import load_dataset

# 모델 불러오기
model_name = "kingkim/kodialogpt_v1.1_SecurityManual"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name)

dataset = load_dataset("kingkim/DS_Building_SecurityManual_V4")

from datasets import load_dataset
from transformers import AutoTokenizer

# 데이터셋 로드
dataset = load_dataset("kingkim/DS_Building_SecurityManual_V4")

# 토크나이저 로드 (모델에 맞게 설정)
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# 프롬프트 생성 함수
def generate_prompt(data_point):
    input_text = data_point['input']
    output_text = data_point['output']
    return f"Q: {input_text} \nA: {output_text}"

# 전처리 함수
def preprocess_function(examples):
    prompts = [generate_prompt({'input': examples['input'][i], 'output': examples['output'][i]}) for i in range(len(examples['input']))] # Access the elements in the dictionary using keys and then iterate over the lists.
    # Add a padding token to the tokenizer
    tokenizer.add_special_tokens({'pad_token': '[PAD]'})
    return tokenizer(prompts, truncation=True, padding="max_length", max_length=512)

# 전처리 적용
tokenized_dataset = dataset.map(preprocess_function, batched=True)
tokenized_dataset = tokenized_dataset.shuffle(seed=42)

from transformers import AutoModelForCausalLM, Trainer, TrainingArguments, DataCollatorForLanguageModeling

# 모델 로드
model = AutoModelForCausalLM.from_pretrained("kingkim/kodialogpt_v1.1_SecurityManual")

# 훈련 인자 설정
training_args = TrainingArguments(
    output_dir="./results",
    per_device_train_batch_size=2,
    gradient_accumulation_steps=4,
    num_train_epochs=3,
    learning_rate=2e-4,
    logging_dir='./logs',
    save_strategy="epoch",
    evaluation_strategy="epoch",
    logging_steps=10,
    load_best_model_at_end=True
)

# 데이터 콜레이터 설정
data_collator = DataCollatorForLanguageModeling(
    tokenizer=tokenizer,
    mlm=False
)

# 데이터셋 분리
train_test_split = tokenized_dataset['train'].train_test_split(test_size=0.2)
train_data = train_test_split['train']
eval_data = train_test_split['test']

# Trainer 설정
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_data,
    eval_dataset=eval_data,
    data_collator=data_collator,
    tokenizer=tokenizer,
)

trainer.train()

# 모델과 토크나이저 저장
model_directory = "./finetuned_kodialogpt_security_manual"
model.save_pretrained(model_directory)
tokenizer.save_pretrained(model_directory)

# Hugging Face에 업로드
from huggingface_hub import notebook_login
notebook_login()

# Hugging Face에 업로드
model.push_to_hub("kingkim/kodialogpt_v2.0_SecurityManual", use_auth_token=True)
tokenizer.push_to_hub("kingkim/kodialogpt_v2.0_SecurityManual", use_auth_token=True)
trainer.push_to_hub("kingkim/kodialogpt_v2.0_SecurityManual")